#labels Phase-Support,性能优化
= Xmemcached性能优化=

网络层暂时不提供优化手段，默认设置是我测试后比较平衡的配置



= 详细说明=

XMemcached对操作主要的优化手段
  * get的优化，连续的get操作将被合并成一个get操作提交，最多合并mergeFactor个命令，这个参数可以通过XMemcachedClient.setMergeFactor(int)方法设置，默认是150。get优化默认是开启的，可以通过XMemcachedClient.setMergeFactor(0)关闭。不推荐设置过大的数值。
  
  * xmemcached会将连续的操作形成的ByteBuffer合并成一个大的ByteBuffer，大小接近socket的发送缓冲区大小，以最大限度地提升发送效率，这个优化默认也是开启的，可以通过XMemcachedClient.setOptimizeMergeBuffer(false)关闭。不推荐关闭。
  
  * 网络层的优化，默认采用阻塞读，在局域网内能带来更好的效率，可以设置网络参数，linux系统在多节点memcached下，强烈建议将读的线程数设置大于0，接近节点数（具体参数看你的测试结果）；在windows系统，推荐采用默认设置：

{{{
     XMemcachedClientBuilder builder = new XMemcachedClientBuilder(
					AddrUtil.getAddresses("localhost:12000"));
     builder.setBufferAllocator(new CachedBufferAllocator()); //采用CachedBufferAllocator
     builder.getConfiguration().setReadThreadCount(2); // 设置读线程数
}}}

  * 如上面代码所示，你可以采用CachedBufferAllocator作为ByteBuffer的分配器，这个分配器将在ThreadLocal中缓存创建的ByteBuffer重复利用。
