#labels Phase-Support,Integration,spring,Featured
XMemcached supports a easy way to integrate to spring framework since version 1.1.2

=Simple Config=
{{{
   <bean name="memcachedClient"
		class="net.rubyeye.xmemcached.utils.XMemcachedClientFactoryBean" destroy-method="shutdown">
		<property name="servers">
			<value>host1:port1 host2:port2</value>
		</property>
   </bean>
}}}
Then,you can use memcachedClient in other beans.

=Whole Config=

{{{
  <bean name="memcachedClient"
		class="net.rubyeye.xmemcached.utils.XMemcachedClientFactoryBean" destroy-method="shutdown">
		<property name="servers">
			<value>host1:port1 host2:port2 host3:port3</value>
		</property>
                <!-- server's weights -->
		<property name="weights">
			<list>
				<value>1</value>
				<value>2</value>
				<value>3</value>
			</list>
		</property>
                <!-- nio connection pool size -->
                <property name="connectionPoolSize" value="2"></property>
		 <!-- Use binary protocol,default is TextCommandFactory -->
                <property name="commandFactory">
		   <bean class="net.rubyeye.xmemcached.command.BinaryCommandFactory"></bean>
		</property>
                <!-- Distributed strategy -->
		<property name="sessionLocator">
			<bean class="net.rubyeye.xmemcached.impl.KetamaMemcachedSessionLocator"></bean>
		</property>
                <!-- Serializing transcoder -->
		<property name="transcoder">
			<bean class="net.rubyeye.xmemcached.transcoders.SerializingTranscoder" />
		</property>
                 <!-- ByteBuffer allocator -->
		<property name="bufferAllocator">
			<bean class="net.rubyeye.xmemcached.buffer.SimpleBufferAllocator"></bean>
		</property>
	</bean>
}}}